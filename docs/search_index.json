[["index.html", "scRNA-Seq 分析笔记 前言", " scRNA-Seq 分析笔记 苏总华 2024-11-15 前言 单细胞测序分析笔记。 "],["scrna-seq-简介.html", "第 1 章 scRNA-Seq 简介", " 第 1 章 scRNA-Seq 简介 …… "],["scrna-seq-基本概念.html", "第 2 章 scRNA-Seq 基本概念 单细胞 RNA 测序 高变基因（Highly Variable Genes, HVGs） Marker 基因", " 第 2 章 scRNA-Seq 基本概念 单细胞 RNA 测序 单细胞RNA测序（scRNA-Seq）是一种前沿的高通量测序技术，专门用于定量分析单个细胞内的转录本表达情况。该技术的核心在于能够从单个细胞中提取RNA，随后对其进行逆转录和扩增，以生成适合测序的文库。通过这种方式，scRNA-Seq能够捕捉到细胞内各个基因的表达水平，揭示细胞群体内的异质性。 与传统的RNA测序（RNA-Seq）相比，后者通常是对多个细胞或组织样本的整体RNA进行分析，提供的是平均表达值，可能掩盖细胞间的差异。而scRNA-Seq可以在单细胞层面上进行分析，使得研究者能够识别不同细胞类型、状态及其在特定生物过程中（如发育、疾病或反应）中的角色。 scRNA-Seq的流程一般包括细胞分离、RNA提取、逆转录、扩增和测序。常用的细胞分离技术包括微流体技术和激光捕获显微切割。数据分析涉及多种生物信息学方法，如降维（例如t-SNE和UMAP）、聚类分析及差异表达分析，以揭示细胞的亚群体和特征。 总之，scRNA-Seq为研究细胞功能、发育和疾病机制提供了强大的工具，推动了对复杂生物系统理解的深化，并在肿瘤生物学、免疫学和神经科学等领域展现出广阔的应用前景。 高变基因（Highly Variable Genes, HVGs） 定义：高变基因是指在不同细胞之间表达差异显著的基因。这些基因在单细胞水平上表现出较大的变异性，通常用于捕捉细胞间的异质性。 用途：HVGs常用于降维分析（如PCA、t-SNE、UMAP）和聚类分析，因为它们能够反映不同细胞之间的生物学差异，帮助识别和分离不同的细胞群体。 在单细胞RNA测序数据中，通常会选择表达变异性较大的基因进行后续分析。 Marker 基因 定义：Marker基因是指在特定细胞类型或细胞状态中表达显著高于其他细胞类型的基因。这些基因可以用来标识和区分不同的细胞群体。 用途：Marker基因常用于细胞分类、识别特定细胞类型（如免疫细胞、神经元等）和研究细胞的功能。通过检测这些基因的表达，可以判断细胞属于哪种类型。 示例：例如，CD4和CD8是T细胞的marker基因，神经元的marker基因可能包括NeuN等。 "],["单细胞基本分析流程.html", "第 3 章 单细胞基本分析流程 数据读取 质量控制指标 数据标准化 识别高变基因 缩放数据 PCA线性降维 细胞聚类 非线性降维UMAP/tSNE", " 第 3 章 单细胞基本分析流程 单细胞分析基础流程一般分为十步： 💡 step1: 设置Seurat对象 💡 step2: 质量控制 💡 step3: 表达量的标准化和归一化 💡 step4: 去除干扰因素(多个样本整合) 💡 step5: 识别高变基因 💡 step6: 多种降维算法 💡 step7: 可视化降维结果 💡 step8: 多种聚类算法 💡 step9: 聚类后找每个细胞亚群的标志基因进行亚群命名 💡 step10: 继续分类 数据读取 创建Seurat的关键是读取数据，创建Seurat对象。单细胞数据一般是一个稀疏矩阵，行是基因，列是细胞，元素是基因表达量。我们常见的数据来源有10X Genomics、Drop-seq、CEL-seq2等。 10X Genomics 三文件 10x Genomics 的细胞基因矩阵通常存储在三个关键文件中，这些文件共同描述了单细胞测序数据。这三个文件分别是： - barcodes.tsv：包含每个细胞的唯一标识符。 - features.tsv：包含每个基因的唯一标识符和名称。 - matrix.mtx：包含每个细胞和基因之间的表达量。 10x Genomics 三文件详解 barcodes.tsv 一列多行，每一行代表一个细胞。 AAACCCAAGAGGATCC-1 AAACCCAAGCCGCTTG-1 AAACCCAAGGATGGCT-1 AAACCCAGTCTCGGGT-1 AAACCCAGTGCCCGTA-1 AAACCCATCCCAAGCG-1 AAACCCATCCGCGGAT-1 AAACCCATCGAATCCA-1 AAACGAAAGCCTCTGG-1 AAACGAAAGTCATCCA-1 features/genes.tsv 两列多行，每一行代表一个基因，每行第一个是基因ID，第二个是对应的基因symbol名称。 ENSMUSG00000086053 Gm15178 ENSMUSG00000100764 Gm29155 ENSMUSG00000102095 C730036E19Rik ENSMUSG00000100635 Gm29157 ENSMUSG00000100480 Gm29156 ENSMUSG00000051285 Pcmtd1 ENSMUSG00000097797 Gm26901 ENSMUSG00000103067 Gm30414 ENSMUSG00000026312 Cdh7 ENSMUSG00000039748 Exo1 matrix.mtx 三列多行，前两行可以理解为标题。从第三行开始，第一个数C1代表基因（即genes/features.tsv中第C1行对应的基因），第二个数C2代表细胞（即barcodes.tsv中第C2行对应的细胞），第三列是表达量。 %%MatrixMarket matrix coordinate integer general %metadata_json: {&quot;software_version&quot;: &quot;cellranger-6.1.0&quot;, &quot;format_version&quot;: 2} 33904 6739 16639697 18 1 1 36 1 1 63 1 2 111 1 1 118 1 1 135 1 1 167 1 1 查看三个文件的行数即对应 细胞数量，基因数量，以及有表达量的值的数量 $ wc -l * 2700 barcodes.tsv # 细胞数量 32738 genes.tsv # 基因数目 2286887 matrix.mtx # 有表达量的值的数目 质量控制指标 单细胞测序中主要的质量控制指标有： 🧬细胞中检测到的基因计数 低质量的细胞或空液滴通常含有很少的基因计数 细胞双胞体或多胞体可能表现出异常高的基因计数 🧬基因的表达量 低表达的基因可能是噪音 🧬细胞中线粒体基因的比例 高线粒体基因比 例的细胞可能是死细胞/受到应激的细胞 nCount_RNA 与 percent.mt 相关关系 正常情况下，nCount_RNA 与 percent.mt 的相关关系接近于0，即线粒体基因的的比例（percent.mt）在不同的细胞中与总的 RNA 计数（nCount_RNA）之间没有明显的相关性。但如果观察到显著的负相关，可能意味着细胞存在线粒体基因的异常高表达（如细胞凋亡）。因此，这一步有助于识别和过滤掉可能有问题的细胞。 nCount_RNA 与 nFeature_RNA 的关系 正常情况下，nCount_RNA 和 nFeature_RNA 之间有很强的正相关关系。因为一般来说，检测到的基因数量（nFeature_RNA）与总的RNA计数（nCount_RNA）应该成正比。强正相关关系表明数据质量良好，数据没有受到过多的噪音或双重细胞的干扰。 数据标准化 数据标准化是为了消除不同细胞之间的技术差异，使得不同细胞之间的表达量可以进行比较。 默认情况下，采用全局尺度标准化方法“LogNormalize”，将每个细胞的特征表达测量值标准化为总表达，将其乘以比例因子（默认为 10,000），并对结果进行对数转换。 识别高变基因 高变基因是指在细胞群体中表达变异较大的基因。这些基因可能是细胞亚群的标志基因，也可能是细胞状态的标志基因。我们可以通过计算基因的方差来识别高变基因。下游分析中关注这些基因有助于突出单细胞数据集中的生物信号。 缩放数据 数据缩放是为了消除不同基因表达量的量极差异。不同基因的表达量可能有很大的差异。缩放步骤通过将每个基因的表达量转换为标准正态分布（平均值为0，标准差为1），使得不同基因的表达量可以进行比较。此步骤在下游分析中给予同等的权重，因此高表达的基因不会占主导地位 PCA线性降维 在单细胞测序数据分析中，PCA（主成分分析）的主要目的是： 降维：减少数据的维度，使得后续分析和可视化更加简单和高效。 去噪：分离噪声，保留主要的信号，提高数据质量。 可视化：将高维数据投影到二维或三维空间，便于观察和理解不同细胞群体的分布。 特征提取：揭示数据中的主要变化方向和模式，帮助识别不同的生物学过程或细胞状态。 细胞聚类 细胞分类的目的是根据基因表达模式将细胞分成不同的群体或簇，这些群体代表具有相似基因表达特征的细胞类型或亚群。Seurat采用基于图的聚类方法，受到SNN-Cliq和PhenoGraph等方法的启发。 K-近邻图（KNN Graph）： 首先在PCA空间中基于欧几里得距离构建KNN图，并使用Jaccard相似度调整边权重（通过FindNeighbors()函数完成）。 模块化优化聚类： 使用Louvain算法或SLM算法进行聚类（通过FindClusters()函数实现），优化模块化函数。 分辨率参数控制聚类的粒度，通常设置在0.4-1.2之间，具体值视数据集大小而定。 聚类结果： 使用Idents()函数可以找到最终的聚类。 非线性降维UMAP/tSNE UMAP和t-SNE用于将高维基因表达数据映射到一个低维空间（通常是2D或3D），以便于可视化。 这些降维技术保留了原始数据中的局部结构，使得在低维空间中相似的细胞在图中也会靠近。 降维后的可视化图有助于直观地展示细胞之间的关系和聚类结果，帮助识别和解释不同细胞群体的分布和相互关系。 "],["单样本分析.html", "第 4 章 单样本分析 设置Seurat对象 质量控制 数据标准化 识别高变基因 缩放数据 PCA 线性降维 细胞聚类 非线性降维UMAP/tSNE marker 基因 亚群命名", " 第 4 章 单样本分析 本章节数据和代码来自Seurat官网数据，是10X Genomics 免费提供的外周血单核细胞 (PBMC) 数据。 数据可在此下载。 基本流程如下： 设置Seurat对象 首先读取数据。Read10X() 函数读取来自 10X 的 cellranger pipline 的输出，返回一个唯一分子标识（UMI）计数矩阵。该矩阵中的值表示在每个单元（即细胞；列）中检测到的每个特征（即基因；行）的分子数量。然后我们使用计数矩阵来创建Seurat对象。该对象充当一个容器，其中包含单细胞数据集的数据（如计数矩阵）和分析（如 PCA 或聚类结果）。 # 加载包 library(dplyr) library(Seurat) library(patchwork) # 读取数据 pbmc.data &lt;- Read10X(data.dir = &quot;data/single_sample/filtered_gene_bc_matrices/hg19/&quot;) # 创建Seurat对象 pbmc &lt;- CreateSeuratObject(counts = pbmc.data, project = &quot;pbmc3k&quot;, #自定义项目名 min.cells = 3, # 每个基因至少在3个细胞中检测到 min.features = 200) # 每个细胞至少检测到200个基因 pbmc ## An object of class Seurat ## 13714 features across 2700 samples within 1 assay ## Active assay: RNA (13714 features, 0 variable features) ## 1 layer present: counts 质量控制 在创建Seurat时 (CreateSeuratObject) 已经完成了基本的质量控制，即每个基因至少在3个细胞中检测到，每个细胞至少检测到200个基因。 但仍然可以根据需要进一步过滤数据。例如高基因计数、高线粒体比例的细胞。 计算每个细胞线粒体基因的百分比 pbmc[[&quot;percent.mt&quot;]] &lt;- PercentageFeatureSet(pbmc, pattern = &quot;^MT-&quot;) QC指标储存位置 Seurat对象的meta.data中储存了质量控制的指标，他是一个数据框，每一行代表一个细胞，每一列代表一个指标。 # 查看前5行 head(pbmc@meta.data, 5) ## orig.ident nCount_RNA nFeature_RNA percent.mt ## AAACATACAACCAC-1 pbmc3k 2419 779 3.0177759 ## AAACATTGAGCTAC-1 pbmc3k 4903 1352 3.7935958 ## AAACATTGATCAGC-1 pbmc3k 3147 1129 0.8897363 ## AAACCGTGCTTCCG-1 pbmc3k 2639 960 1.7430845 ## AAACCGTGTATGCG-1 pbmc3k 980 521 1.2244898 # View(pbmc@meta.data) #或者直接查看 其中，前三列指标是我们在创建Seurat对象时候设定的。 第一列orig.ident是原始细胞的标识； 第二列nCount_RNA是每个细胞的RNA分子数； 第三列nFeature_RNA是每个细胞检测到的基因数。 QC可视化 通常我们对每个细胞进行统计分析后，会得到一些质量控制指标，如细胞的RNA分子数、检测到的基因数、线粒体基因的百分比等。我们对这些指标进行可视化，以便更好地了解数据的质量。这也为我们如何选择合适的过滤阈值进行下一步分析提供了参考。 # 小提琴图可视化QC指标 VlnPlot(pbmc, features = c(&quot;nFeature_RNA&quot;, &quot;nCount_RNA&quot;, &quot;percent.mt&quot;), ncol = 3) # 散点图可视化QC指标 FeatureScatter(pbmc, feature1 = &quot;nCount_RNA&quot;, feature2 = &quot;nFeature_RNA&quot;) | FeatureScatter(pbmc, feature1 = &quot;nCount_RNA&quot;, feature2 = &quot;nFeature_RNA&quot;) 过滤 根据我们的过滤标准，我们可以过滤掉一些质量较差的细胞。 这里我们过滤掉 RNA分子数大于2500和小于200的细胞。 线粒体比例大于5%的细胞。 pbmc &lt;- subset(pbmc, subset = nFeature_RNA &gt; 200 &amp; nFeature_RNA &lt; 2500 &amp; percent.mt &lt; 5) dim(pbmc) ## [1] 13714 2638 可以看到过滤后我们的细胞数从2700降到2638。 数据标准化 pbmc &lt;- NormalizeData(pbmc, normalization.method = &quot;LogNormalize&quot;, scale.factor = 10000) 标准化值储存位置 head(pbmc[[&quot;RNA&quot;]]$data, 5)[,1:3] # 同样是一个稀疏矩阵 ## 5 x 3 sparse Matrix of class &quot;dgCMatrix&quot; ## AAACATACAACCAC-1 AAACATTGAGCTAC-1 AAACATTGATCAGC-1 ## AL627309.1 . . . ## AP006222.2 . . . ## RP11-206L10.2 . . . ## RP11-206L10.9 . . . ## LINC00115 . . . 数据标准化前后区别 k_c&lt;- as.matrix(pbmc[[&quot;RNA&quot;]]$counts) # 原始计数矩阵 k_n&lt;- as.matrix(pbmc[[&quot;RNA&quot;]]$data) # 标准化后的计数矩阵 k1&lt;- apply(k_c, 2, sum) # 原始每个细胞基因表达的总计数 k2&lt;- apply(k_n, 2, sum) # 标准化后每个细胞基因表达的总计数 hist(k1, main=&quot;Histogram of raw data&quot;) hist(k2, main=&quot;hisogram of normalized data&quot;) 识别高变基因 识别高变基因通过FindVariableFeatures函数实现。该函数计算每个基因的方差，并根据方差的大小对基因进行排序。我们可以选择一定数量的高变基因用于下游分析。 默认情况下，每个数据集会返回2000个高变基因。 pbmc &lt;- FindVariableFeatures(pbmc, selection.method = &quot;vst&quot;, nfeatures = 2000) # Identify the 10 most highly variable genes top10 &lt;- head(VariableFeatures(pbmc), 10) # plot variable features with and without labels plot1 &lt;- VariableFeaturePlot(pbmc) plot2 &lt;- LabelPoints(plot = plot1, points = top10, repel = TRUE) plot1 + plot2 高变基因信息储存位置 pbmc[[&quot;RNA&quot;]]@meta.data$var.features %&gt;% is.na() %&gt;% `!` %&gt;% sum() ## [1] 2000 可以看到我们的数据集中识别到的2000个高变基因。 缩放数据 应用线性变换（“scaling”）缩放数据，这是PCA等降维技术之前的标准预处理步骤，使用ScaleData函数完成这一步。 默认情况下，仅缩放可变基因，但也可以选择缩放所有基因。 all.genes &lt;- rownames(pbmc) pbmc &lt;- ScaleData(pbmc, features = all.genes) 缩放后数据储存位置 pbmc[[&quot;RNA&quot;]]$scale.data[1:5, 1:3] ## AAACATACAACCAC-1 AAACATTGAGCTAC-1 AAACATTGATCAGC-1 ## AL627309.1 -0.05812316 -0.05812316 -0.05812316 ## AP006222.2 -0.03357571 -0.03357571 -0.03357571 ## RP11-206L10.2 -0.04166819 -0.04166819 -0.04166819 ## RP11-206L10.9 -0.03364562 -0.03364562 -0.03364562 ## LINC00115 -0.08223981 -0.08223981 -0.08223981 如何消除不需要的变异源 在 Seurat 中，ScaleData()函数不仅用于对数据进行缩放（标准化），还可以用于回归掉数据中的不需要的变异来源。这些不需要的变异来源可能包括细胞周期阶段、线粒体污染等。通过回归掉这些变异来源，可以减少它们对下游分析（如聚类、降维等）的影响，从而更好地揭示生物学上有意义的信号。 “回归掉”变异来源是指通过线性回归模型，将这些不需要的变异从基因表达数据中移除。这样做的目的是减少这些变异对数据的影响，使得下游分析更加准确和可靠。 pbmc &lt;- ScaleData(pbmc, vars.to.regress = &quot;percent.mt&quot;) 但是对于想使用此功能的，Seurat作者官网中强烈建议在数据标准化步骤走SCTransform()流程，而不是直接使用ScaleData函数。 PCA 线性降维 PCA 是一种常用的降维技术，用于将高维数据转换为低维数据。在单细胞数据中，PCA通常用于发现数据中的主要变化方向，以便在后续分析中使用。 默认情况下，仅将先前识别的高变基因用于 PCA 输入。PCA 帮助识别数据中变化最大的方向，并将这些方向作为新的坐标轴（主成分），减少数据的维度。 pbmc &lt;- RunPCA(pbmc, features = VariableFeatures(object = pbmc)) # Examine and visualize PCA results a few different ways print(pbmc[[&quot;pca&quot;]], dims = 1:5, nfeatures = 5) ## PC_ 1 ## Positive: CST3, TYROBP, LST1, AIF1, FTL ## Negative: MALAT1, LTB, IL32, IL7R, CD2 ## PC_ 2 ## Positive: CD79A, MS4A1, TCL1A, HLA-DQA1, HLA-DQB1 ## Negative: NKG7, PRF1, CST7, GZMB, GZMA ## PC_ 3 ## Positive: HLA-DQA1, CD79A, CD79B, HLA-DQB1, HLA-DPB1 ## Negative: PPBP, PF4, SDPR, SPARC, GNG11 ## PC_ 4 ## Positive: HLA-DQA1, CD79B, CD79A, MS4A1, HLA-DQB1 ## Negative: VIM, IL7R, S100A6, IL32, S100A8 ## PC_ 5 ## Positive: GZMB, NKG7, S100A8, FGFBP2, GNLY ## Negative: LTB, IL7R, CKB, VIM, MS4A7 🌟可视化PCA结果 VizDimLoadings 函数可视化前两个主成分（PC1和PC2）上基因的加载值。加载值代表每个基因在主成分上的贡献大小，帮助识别哪些基因在特定主成分上有较大的影响。 VizDimLoadings(pbmc, dims = 1:2, reduction = &quot;pca&quot;) DimPlot(pbmc, reduction = &quot;pca&quot;) + NoLegend() DimHeatmap() 函数用于在主成分分析（PCA）后生成热图，帮助探索数据中的主要异质性来源，并决定哪些主成分（PCs）应包括在后续分析中。热图中的细胞和特征根据它们的 PCA 分数排序，设置 cells 参数为一个数字可以加速大数据集的绘图。尽管这是监督分析，但它是探索相关特征集的有价值工具。 DimHeatmap(pbmc, dims = 1, cells = 500, balanced = TRUE) DimHeatmap(pbmc, dims = 1:15, cells = 500, balanced = TRUE) 确定数据集的“维度” 单个特征的技术噪声在 scRNA-seq 数据中通常很大。为了克服这一问题，Seurat 根据细胞的 PCA 分数进行聚类，每个主成分（PC）实际上代表一个“元特征”，它结合了多个相关特征的信息。因此，前几个主成分代表了数据集的一个稳健压缩。但是面临的一个重要问题是应该选择多少个主成分来包括在分析中，比如 10 个、20 个还是 100 个？ Seurat 作者推荐可以生成一个“肘部图”（Elbow plot），这是一个基于每个主成分所解释的方差百分比的排名。图中通常会出现一个”肘部”，即标准差开始显著下降的点，选择这个点之前的主成分数目通常是合适的。并且建议在选择该参数时宁可偏高。 ElbowPlot(pbmc) 在这个例子中，可以观察到大约在第 9-10 个主成分处出现一个“肘部”，这表明前 10 个主成分捕捉到了大部分的真实信号。 细胞聚类 FindNeighbors()函数将先前定义的数据集维度（前 10 个 PC）作为输入。 FindClusters()函数包含一个分辨率参数，用于设置下游聚类的“粒度”，增加的值会导致更多的聚类。此参数设置在 0.4-1.2 之间通常会为大约 3K 细胞的单细胞数据集带来良好的结果。对于较大的数据集，最佳分辨率通常会增加 pbmc &lt;- FindNeighbors(pbmc, dims = 1:10) pbmc &lt;- FindClusters(pbmc, resolution = 0.5) ## Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck ## ## Number of nodes: 2638 ## Number of edges: 95927 ## ## Running Louvain algorithm... ## Maximum modularity in 10 random starts: 0.8728 ## Number of communities: 9 ## Elapsed time: 0 seconds # Look at cluster IDs of the first 5 cells head(Idents(pbmc), 5) ## AAACATACAACCAC-1 AAACATTGAGCTAC-1 AAACATTGATCAGC-1 AAACCGTGCTTCCG-1 ## 2 3 2 1 ## AAACCGTGTATGCG-1 ## 6 ## Levels: 0 1 2 3 4 5 6 7 8 非线性降维UMAP/tSNE Seurat 提供了几种非线性降维技术，例如 tSNE 和 UMAP，用于可视化和探索这些数据集。这些算法的目标是学习数据集中的底层结构，以便在低维空间中将相似的细胞放在一起。因此，在上述基于图的聚类中被分组在一起的细胞应该在这些降维图上共定位。 pbmc &lt;- RunUMAP(pbmc, dims = 1:10) pbmc &lt;- RunTSNE(pbmc, dims = 1:10) # note that you can set `label = TRUE` or use the LabelClusters function to help label # individual clusters DimPlot(pbmc, reduction = &quot;umap&quot;)| DimPlot(pbmc, reduction = &quot;tsne&quot;) saveRDS(pbmc, file = &quot;../output/pbmc_tutorial.rds&quot;) marker 基因 Seurat 可以通过差异表达（DE）帮助你找到定义聚类的标志物。默认情况下，它会识别一个聚类（在 ident.1中指定）的正负标志物，并将其与所有其他细胞进行比较。FindAllMarkers() 函数可以自动完成所有聚类的这个过程，但你也可以测试聚类组之间的差异，或者将其与所有细胞进行比较。 # find all markers of cluster 2 cluster2.markers &lt;- FindMarkers(pbmc, ident.1 = 2) head(cluster2.markers, n = 5) ## p_val avg_log2FC pct.1 pct.2 p_val_adj ## IL32 2.892340e-90 1.3070772 0.947 0.465 3.966555e-86 ## LTB 1.060121e-86 1.3312674 0.981 0.643 1.453850e-82 ## CD3D 8.794641e-71 1.0597620 0.922 0.432 1.206097e-66 ## IL7R 3.516098e-68 1.4377848 0.750 0.326 4.821977e-64 ## LDHB 1.642480e-67 0.9911924 0.954 0.614 2.252497e-63 # find all markers distinguishing cluster 5 from clusters 0 and 3 cluster5.markers &lt;- FindMarkers(pbmc, ident.1 = 5, ident.2 = c(0, 3)) head(cluster5.markers, n = 5) ## p_val avg_log2FC pct.1 pct.2 p_val_adj ## FCGR3A 8.246578e-205 6.794969 0.975 0.040 1.130936e-200 ## IFITM3 1.677613e-195 6.192558 0.975 0.049 2.300678e-191 ## CFD 2.401156e-193 6.015172 0.938 0.038 3.292945e-189 ## CD68 2.900384e-191 5.530330 0.926 0.035 3.977587e-187 ## RP11-290F20.3 2.513244e-186 6.297999 0.840 0.017 3.446663e-182 # find markers for every cluster compared to all remaining cells, report only the positive # ones pbmc.markers &lt;- FindAllMarkers(pbmc, only.pos = TRUE) pbmc.markers %&gt;% group_by(cluster) %&gt;% dplyr::filter(avg_log2FC &gt; 1) ## # A tibble: 7,019 × 7 ## # Groups: cluster [9] ## p_val avg_log2FC pct.1 pct.2 p_val_adj cluster gene ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; &lt;chr&gt; ## 1 3.75e-112 1.21 0.912 0.592 5.14e-108 0 LDHB ## 2 9.57e- 88 2.40 0.447 0.108 1.31e- 83 0 CCR7 ## 3 1.15e- 76 1.06 0.845 0.406 1.58e- 72 0 CD3D ## 4 1.12e- 54 1.04 0.731 0.4 1.54e- 50 0 CD3E ## 5 1.35e- 51 2.14 0.342 0.103 1.86e- 47 0 LEF1 ## 6 1.94e- 47 1.20 0.629 0.359 2.66e- 43 0 NOSIP ## 7 2.81e- 44 1.53 0.443 0.185 3.85e- 40 0 PIK3IP1 ## 8 6.27e- 43 1.99 0.33 0.112 8.60e- 39 0 PRKCQ-AS1 ## 9 1.16e- 40 2.70 0.2 0.04 1.59e- 36 0 FHIT ## 10 1.34e- 34 1.96 0.268 0.087 1.84e- 30 0 MAL ## # ℹ 7,009 more rows Seurat 有几种用于差异表达分析的测试方法，可以通过 test.use 参数进行设置。例如，ROC测试会返回任何单个标志物的“分类能力”（范围从0表示随机，到1表示完美）。 cluster0.markers &lt;- FindMarkers(pbmc, ident.1 = 0, logfc.threshold = 0.25, test.use = &quot;roc&quot;, only.pos = TRUE) 🌟可视化marker基因 VlnPlot(pbmc, features = c(&quot;MS4A1&quot;, &quot;CD79A&quot;)) # you can plot raw counts as well VlnPlot(pbmc, features = c(&quot;NKG7&quot;, &quot;PF4&quot;), slot = &quot;counts&quot;, log = TRUE) FeaturePlot(pbmc, features = c(&quot;MS4A1&quot;, &quot;GNLY&quot;, &quot;CD3E&quot;, &quot;CD14&quot;, &quot;FCER1A&quot;, &quot;FCGR3A&quot;, &quot;LYZ&quot;, &quot;PPBP&quot;, &quot;CD8A&quot;)) DoHeatmap() 函数为给定的细胞和特征生成一个表达热图。在这种情况下，我们绘制了每个簇的前10个标志物（如果标志物少于20个，则绘制所有标志物）。 pbmc.markers %&gt;% group_by(cluster) %&gt;% # 按簇（cluster）分组 dplyr::filter(avg_log2FC &gt; 1) %&gt;% # 筛选出平均对数2倍变化（avg_log2FC）大于1的基因。 slice_head(n = 10) %&gt;% # 保留每个簇的前10个基因 ungroup() -&gt; top10 # 解除分组，并将结果存储到`top10`变量中 DoHeatmap(pbmc, features = top10$gene) + NoLegend() pbmc.markers %&gt;% group_by(cluster) %&gt;% # 按簇（cluster）分组 dplyr::filter(avg_log2FC &gt; 1) %&gt;% # 筛选出平均对数2倍变化（avg_log2FC）大于1的基因。 slice_head(n = 10) %&gt;% # 保留每个簇的前10个基因 ungroup() -&gt; top10 # 解除分组，并将结果存储到`top10`变量中 RidgePlot(pbmc, features = top10$gene[1:6]) 亚群命名 new.cluster.ids &lt;- c(&quot;Naive CD4 T&quot;, &quot;CD14+ Mono&quot;, &quot;Memory CD4 T&quot;, &quot;B&quot;, &quot;CD8 T&quot;, &quot;FCGR3A+ Mono&quot;, &quot;NK&quot;, &quot;DC&quot;, &quot;Platelet&quot;) names(new.cluster.ids) &lt;- levels(pbmc) pbmc &lt;- RenameIdents(pbmc, new.cluster.ids) DimPlot(pbmc, reduction = &quot;umap&quot;, label = TRUE, pt.size = 0.5) + NoLegend() saveRDS(pbmc, file = &quot;../output/pbmc3k_final.rds&quot;) "],["多样本分析.html", "第 5 章 多样本分析 加载包 创建多样本Seurat对象 质控 harmony流程 marker 基因 亚群命名", " 第 5 章 多样本分析 加载包 library(COSG) library(harmony) library(ggsci) library(future) library(Seurat) library(clustree) library(cowplot) library(data.table) library(patchwork) library(stringr) library(SingleR) library(tidyverse) library(tidydr) 创建多样本Seurat对象 不同于单样本分析，多样本分析需要将多个样本整合到一个Seurat对象中。这里我们使用lapply函数，将多个样本的数据读取并整合到一个列表中。进而创建Searut对象。 dir=&quot;data/multi-samples/outputs&quot; samples=list.files(dir) samples ## [1] &quot;GSM4888887_CTRL1&quot; &quot;GSM4888888_CTRL2&quot; &quot;GSM4888891_AD1&quot; &quot;GSM4888892_AD2&quot; ## [5] &quot;GSM4888895_PD1&quot; &quot;GSM4888896_PD2&quot; sceList = lapply(samples,function(pro){ #pro=samples[1] print(pro) tmp = Read10X(file.path(dir, pro)) if(length(tmp)==2){ ct = tmp[[1]] }else{ct = tmp} sce =CreateSeuratObject(counts = ct , project = pro , min.cells = 5, min.features = 300 ) return(sce) }) ## [1] &quot;GSM4888887_CTRL1&quot; ## [1] &quot;GSM4888888_CTRL2&quot; ## [1] &quot;GSM4888891_AD1&quot; ## [1] &quot;GSM4888892_AD2&quot; ## [1] &quot;GSM4888895_PD1&quot; ## [1] &quot;GSM4888896_PD2&quot; sce.all=merge(x=sceList[[1]], y=sceList[ -1 ], add.cell.ids = samples) # 每个细胞的名称前都会添加一个样本标识符前缀 sce.all &lt;- JoinLayers(sce.all) # 添加分组信息 phe=str_split(colnames(sce.all),&#39;[_-]&#39;,simplify = T) phe[1:5,] ## [,1] [,2] [,3] [,4] ## [1,] &quot;GSM4888887&quot; &quot;CTRL1&quot; &quot;AAACCCAAGACGTCCC&quot; &quot;1&quot; ## [2,] &quot;GSM4888887&quot; &quot;CTRL1&quot; &quot;AAACCCAAGGGCCTCT&quot; &quot;1&quot; ## [3,] &quot;GSM4888887&quot; &quot;CTRL1&quot; &quot;AAACCCACAGGTATGG&quot; &quot;1&quot; ## [4,] &quot;GSM4888887&quot; &quot;CTRL1&quot; &quot;AAACCCAGTCTTGAAC&quot; &quot;1&quot; ## [5,] &quot;GSM4888887&quot; &quot;CTRL1&quot; &quot;AAACCCATCAAGCTGT&quot; &quot;1&quot; sce.all$group = phe[,1] table(sce.all@meta.data$group) ## ## GSM4888887 GSM4888888 GSM4888891 GSM4888892 GSM4888895 GSM4888896 ## 4605 2184 2503 4167 2095 5333 table(sce.all@meta.data$orig.ident) ## ## GSM4888887_CTRL1 GSM4888888_CTRL2 GSM4888891_AD1 GSM4888892_AD2 ## 4605 2184 2503 4167 ## GSM4888895_PD1 GSM4888896_PD2 ## 2095 5333 质控 第一步我们先计算关注的指标 #计算线粒体基因比例 mito_genes=rownames(sce.all)[grep(&quot;^MT-&quot;, rownames(sce.all),ignore.case = T)] print(mito_genes) #可能是13个线粒体基因 ## [1] &quot;MT-TF&quot; &quot;MT-RNR1&quot; &quot;MT-TV&quot; &quot;MT-RNR2&quot; &quot;MT-ND1&quot; &quot;MT-TI&quot; &quot;MT-TM&quot; ## [8] &quot;MT-ND2&quot; &quot;MT-CO1&quot; &quot;MT-CO2&quot; &quot;MT-TK&quot; &quot;MT-ATP8&quot; &quot;MT-ATP6&quot; &quot;MT-CO3&quot; ## [15] &quot;MT-ND3&quot; &quot;MT-ND4L&quot; &quot;MT-ND4&quot; &quot;MT-TH&quot; &quot;MT-ND5&quot; &quot;MT-ND6&quot; &quot;MT-CYB&quot; ## [22] &quot;MT-TP&quot; &quot;MT-TL1&quot; &quot;MT-TD&quot; &quot;MT-TG&quot; sce.all=PercentageFeatureSet(sce.all, features = mito_genes, col.name = &quot;percent_mito&quot;) fivenum(sce.all@meta.data$percent_mito) ## [1] 0.0000000 0.3938158 0.9076559 2.4844720 86.9161677 #计算核糖体基因比例 ribo_genes=rownames(sce.all)[grep(&quot;^Rp[sl]&quot;, rownames(sce.all),ignore.case = T)] print(ribo_genes[1:10]) ## [1] &quot;RPL22&quot; &quot;RPL11&quot; &quot;RPS6KA1&quot; &quot;RPS8&quot; &quot;RPS15AP11&quot; &quot;RPS13P2&quot; ## [7] &quot;RPL21P23&quot; &quot;RPL31P12&quot; &quot;RPL5&quot; &quot;RPL7P9&quot; sce.all=PercentageFeatureSet(sce.all, features = ribo_genes, col.name = &quot;percent_ribo&quot;) fivenum(sce.all@meta.data$percent_ribo) ## [1] 0.0000000 0.3896445 0.6633781 1.3927122 14.5989305 #计算红血细胞基因比例 Hb_genes=rownames(sce.all)[grep(&quot;^Hb[^(p)]&quot;, rownames(sce.all),ignore.case = T)] print(Hb_genes) ## [1] &quot;HBEGF&quot; &quot;HBS1L&quot; &quot;HBB&quot; &quot;HBG2&quot; &quot;HBM&quot; &quot;HBA2&quot; &quot;HBA1&quot; &quot;HBQ1&quot; sce.all=PercentageFeatureSet(sce.all, features = Hb_genes,col.name = &quot;percent_hb&quot;) fivenum(sce.all@meta.data$percent_hb) ## [1] 0.00000000 0.00000000 0.00000000 0.01954031 28.35028077 过滤前可视化 #可视化细胞的上述比例情况 feats &lt;- c(&quot;nFeature_RNA&quot;, &quot;nCount_RNA&quot;) p1=VlnPlot(sce.all, group.by = &quot;orig.ident&quot;, features = feats, pt.size = 0, ncol = 2) + NoLegend() p1 feats &lt;- c(&quot;percent_mito&quot;, &quot;percent_ribo&quot;, &quot;percent_hb&quot;) p2=VlnPlot(sce.all, group.by = &quot;orig.ident&quot;, features = feats, pt.size = 0, ncol = 3, same.y.lims=T) + scale_y_continuous(breaks=seq(0, 100, 5)) + NoLegend() p2 p3=FeatureScatter(sce.all, &quot;nCount_RNA&quot;, &quot;nFeature_RNA&quot;, group.by = &quot;orig.ident&quot;, pt.size = 0.5) p3 开始过滤 # 根据上述指标，过滤低质量细胞/基因 # 过滤指标1:最少表达基因数的细胞&amp;最少表达细胞数的基因 # 一般来说，在`CreateSeuratObject`的时候已经是进行了这个过滤操作 # 如果后期看到了自己的单细胞降维聚类分群结果很诡异，就可以回过头来看质量控制环节 # 先走默认流程即可 if(F){ selected_c &lt;- WhichCells(sce.all, expression = nFeature_RNA &gt; 500) selected_f &lt;- rownames(sce.all)[Matrix::rowSums(sce.all@assays$RNA$counts &gt; 0 ) &gt; 3] sce.all &lt;- subset(sce.all, features = selected_f, cells = selected_c) } #过滤指标2:线粒体/核糖体基因比例(根据上面的violin图) selected_mito &lt;- WhichCells(sce.all, expression = percent_mito &lt; 25);length(selected_mito) ## [1] 20269 selected_ribo &lt;- WhichCells(sce.all, expression = percent_ribo &gt; 3);length(selected_ribo) ## [1] 1386 selected_hb &lt;- WhichCells(sce.all, expression = percent_hb &lt; 1 );length(selected_hb) ## [1] 20876 sce.all &lt;- subset(sce.all, cells = selected_mito) # sce.all.filt &lt;- subset(sce.all.filt, cells = selected_ribo) # sce.all.filt &lt;- subset(sce.all.filt, cells = selected_hb) dim(sce.all) ## [1] 28985 20269 过滤后可视化 #可视化过滤后的情况 feats &lt;- c(&quot;nFeature_RNA&quot;, &quot;nCount_RNA&quot;) p1_filtered=VlnPlot(sce.all, group.by = &quot;orig.ident&quot;, features = feats, pt.size = 0, ncol = 2) + NoLegend() p1_filtered feats &lt;- c(&quot;percent_mito&quot;, &quot;percent_ribo&quot;, &quot;percent_hb&quot;) p2_filtered=VlnPlot(sce.all, group.by = &quot;orig.ident&quot;, features = feats, pt.size = 0, ncol = 3) + NoLegend() p2_filtered harmony流程 sce.all &lt;- NormalizeData(sce.all, normalization.method = &quot;LogNormalize&quot;, scale.factor = 1e4) sce.all &lt;- FindVariableFeatures(sce.all) sce.all &lt;- ScaleData(sce.all) sce.all &lt;- RunPCA(sce.all, features = VariableFeatures(object = sce.all)) sce.all &lt;- RunHarmony(sce.all, &quot;orig.ident&quot;) sce.all &lt;- RunUMAP(sce.all, dims = 1:15, reduction = &quot;harmony&quot;) # sce.all &lt;- RunTSNE(sce.all, dims = 1:15, # reduction = &quot;harmony&quot;) names(sce.all@reductions) ## [1] &quot;pca&quot; &quot;harmony&quot; &quot;umap&quot; harmony使用前后区别 seuratObj &lt;- RunUMAP(sce.all, dims = 1:15, reduction = &quot;pca&quot;) DimPlot(seuratObj, reduction = &quot;umap&quot;, group.by = &quot;orig.ident&quot;) + ggtitle(&quot;harmony_before&quot;)| # 未使用harmony DimPlot(sce.all, reduction = &quot;umap&quot;, group.by = &quot;orig.ident&quot;) + ggtitle(&quot;harmony_later&quot;) # 使用harmony sce.all &lt;- FindNeighbors(sce.all, reduction = &quot;harmony&quot;, dims = 1:15) 设置不同的分辨率，观察分群效果，进而选择最佳分辨率 apply(sce.all@meta.data[,grep(&quot;RNA_snn&quot;,colnames(sce.all@meta.data))],2,table) ## $RNA_snn_res.0.01 ## ## 0 1 2 3 4 5 6 ## 6970 6138 3145 1294 1154 833 735 ## ## $RNA_snn_res.0.05 ## ## 0 1 2 3 4 5 6 7 8 9 ## 6834 5722 3145 1293 1154 834 735 358 137 57 ## ## $RNA_snn_res.0.1 ## ## 0 1 10 2 3 4 5 6 7 8 9 ## 6832 4922 57 3145 1295 1154 834 800 735 358 137 ## ## $RNA_snn_res.0.2 ## ## 0 1 10 11 2 3 4 5 6 7 8 9 ## 6550 4791 57 22 3121 1294 1216 1154 834 735 358 137 ## ## $RNA_snn_res.0.3 ## ## 0 1 10 11 12 2 3 4 5 6 7 8 9 ## 6548 4768 137 83 22 2533 1293 1153 928 877 834 735 358 ## ## $RNA_snn_res.0.5 ## ## 0 1 10 11 12 13 14 15 16 17 18 2 3 4 5 6 ## 6057 4427 522 358 259 236 166 135 67 57 22 2536 1225 1128 740 599 ## 7 8 9 ## 582 580 573 ## ## $RNA_snn_res.0.8 ## ## 0 1 10 11 12 13 14 15 16 17 18 19 2 20 21 22 ## 3590 2144 569 553 522 397 285 266 265 254 225 213 2122 183 158 135 ## 23 24 25 26 3 4 5 6 7 8 9 ## 123 92 83 67 2062 2006 1225 801 740 605 584 ## ## $RNA_snn_res.1 ## ## 0 1 10 11 12 13 14 15 16 17 18 19 2 20 21 22 ## 3325 2170 584 574 569 513 386 266 256 236 213 185 2114 163 136 135 ## 23 24 25 3 4 5 6 7 8 9 ## 114 92 83 2043 1962 1179 827 797 735 612 p1_dim=plot_grid(ncol = 3, DimPlot(sce.all, reduction = &quot;umap&quot;, group.by = &quot;RNA_snn_res.0.01&quot;) + ggtitle(&quot;louvain_0.01&quot;), DimPlot(sce.all, reduction = &quot;umap&quot;, group.by = &quot;RNA_snn_res.0.5&quot;) + ggtitle(&quot;louvain_0.05&quot;), DimPlot(sce.all, reduction = &quot;umap&quot;, group.by = &quot;RNA_snn_res.0.1&quot;) + ggtitle(&quot;louvain_0.1&quot;), DimPlot(sce.all, reduction = &quot;umap&quot;, group.by = &quot;RNA_snn_res.0.2&quot;) + ggtitle(&quot;louvain_0.2&quot;), DimPlot(sce.all, reduction = &quot;umap&quot;, group.by = &quot;RNA_snn_res.0.3&quot;) + ggtitle(&quot;louvain_0.3&quot;), DimPlot(sce.all, reduction = &quot;umap&quot;, group.by = &quot;RNA_snn_res.0.5&quot;) + ggtitle(&quot;louvain_0.5&quot;), DimPlot(sce.all, reduction = &quot;umap&quot;, group.by = &quot;RNA_snn_res.0.8&quot;) + ggtitle(&quot;louvain_0.8&quot;), DimPlot(sce.all, reduction = &quot;umap&quot;, group.by = &quot;RNA_snn_res.1&quot;) + ggtitle(&quot;louvain_1&quot;));p1_dim p2_tree=clustree(sce.all@meta.data, prefix = &quot;RNA_snn_res.&quot;);p2_tree marker 基因 选择需要的阈值，可视化一些marker基因辅助后续的单细胞亚群定义 这里直接选0.8 sel.clust = &quot;RNA_snn_res.0.8&quot; sce.all &lt;- SetIdent(sce.all, value = sel.clust) table(sce.all@active.ident) ## ## 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ## 3590 2144 2122 2062 2006 1225 801 740 605 584 569 553 522 397 285 266 ## 16 17 18 19 20 21 22 23 24 25 26 ## 265 254 225 213 183 158 135 123 92 83 67 可以根据经验构建自己的注释集合（可选） gastric_cancer_markers = c(&#39;PTPRC&#39;, &#39;MUC2&#39; , &#39;ITLN1&#39;, &#39;FABP1&#39; , &#39;APOA1&#39;, &#39;CEACAM5&#39; , &#39;CEACAM6&#39;, &#39;EPCAM&#39;, &#39;KRT18&#39;, &#39;MUC1&#39;, &#39;MUC6&#39; , &#39;TFF2&#39;, &#39;PGA4&#39; , &#39;PGA3&#39;, &#39;MUC5AC&#39; , &#39;TFF1&#39;,&#39;CHGA&#39; , &#39;CHGB&#39;) Myo=c(&quot;Krt17&quot;, &quot;Krt14&quot;, &quot;Krt5&quot;, &quot;Acta2&quot;, &quot;Myl9&quot;, &quot;Mylk&quot;, &quot;Myh11&quot;) Lum=c(&quot;Krt19&quot;, &quot;Krt18&quot;, &quot;Krt8&quot;) Hs=c(&quot;Prlr&quot;, &quot;Cited1&quot;, &quot;Pgr&quot;, &quot;Prom1&quot;, &quot;Esr1&quot;) AV=c(&quot;Mfge8&quot;, &quot;Trf&quot;, &quot;Csn3&quot;, &quot;Wfdc18&quot;, &quot;Elf5&quot;, &quot;Ltf&quot;) Lp=c(&quot;Kit&quot;, &quot;Aldh1a3&quot;, &quot;Cd14&quot;) Fib=c(&quot;Col1a1&quot;, &quot;Col1a2&quot;, &quot;Col3a1&quot;, &quot;Fn1&quot;) GSE150580_breast_cancer_markers_list =list( Myo=Myo, Lum=Lum, Hs=Hs, AV=AV, Lp=Lp, Fib=Fib ) macrophages=c(&#39;Adgre1&#39;, &#39;Cd14&#39;, &#39;Fcgr3&#39;) cDCs=c(&#39;Xcr1&#39;, &#39;Flt3&#39;, &#39;Ccr7&#39;) pDCs=c(&#39;Siglech&#39;, &#39;Clec10a&#39;, &#39;Clec12a&#39;) monocytes=c(&#39;Ly6c2&#39; , &#39;Spn&#39;) neutrophils=c(&#39;Csf3r&#39;, &#39;S100a8&#39;, &#39;Cxcl3&#39;) SCP1661_meyloids_markers_list =list( macrophages=macrophages, cDCs=cDCs, pDCs=pDCs, monocytes=monocytes, neutrophils=neutrophils ) lung_epi_markers = c(&#39;TPPP3&#39;,&quot;SPRR3&quot;,&quot;GDPD3&quot;,&quot;SPRR1A&quot;,&quot;SPRR2A&quot;,&quot;RARRES2&quot;,&quot;TMPRSS11E&quot;, &quot;ASCL3&quot;,&quot;CFTR&quot;,&quot;FOXI2&quot;,&quot;1SG20&quot;,&quot;FOXI1&quot;, &quot;SAA4&quot;,&quot;SAA2&quot;,&quot;EFHC1&quot;,&quot;CCDC153&quot;,&quot;CCDC113&quot;,&quot;SAA1&quot;,&quot;CDC20B&quot;,&quot;FOXJ1&quot;, &quot;MYCL&quot;,&quot;FOXN4&quot;,&quot;CCNO&quot;, &quot;PIGR&quot;,&quot;BP1&quot;,&quot;MUC5A&quot;,&quot;VMO1&quot;,&quot;SCGB3A1&quot;,&quot;CYP2A13&quot;,&quot;CYP2B6&quot;,&quot;SCGB1A1&quot;, &quot;BCAM&quot;,&quot;KRT15&quot;,&quot;KRT5&quot;,&quot;TP63&quot;) myeloids_markers_list1 =list( CM=c(&quot;TTN&quot;,&quot;MYH7&quot;,&quot;MYH6&quot;,&quot;TNNT2&quot;) , EC=c(&quot;VWF&quot;, &quot;IFI27&quot;, &quot;PECAM1&quot;,&quot;MGP&quot;), FB=c(&quot;DCN&quot;, &quot;C7&quot; ,&quot;LUM&quot;,&quot;FBLN1&quot;,&quot;COL1A2&quot;), MP=c(&quot;CD163&quot;, &quot;CCL4&quot;, &quot;CXCL8&quot;,&quot;PTPRC&quot;), SMC=c(&quot;ACTA2&quot;, &quot;CALD1&quot;, &quot;MYH11&quot;), Tc=c(&quot;CD3D&quot;,&quot;CD3E&quot;), DC1 = c( &#39;Clec9a&#39;, &#39;Xcr1&#39;, &#39;Wdfy4&#39;), DC2 = c(&#39;Itgax&#39;, &#39;Sirpa&#39;, &#39;Cd209a&#39;), mregDCs= c(&#39;Ccr7&#39;, &#39;Cd80&#39;, &#39;Cd200&#39;, &#39;Cd247&#39;) , hypoxia=c(&#39;Hif1a&#39;, &#39;Slc2a1&#39;, &#39;Vegfa&#39;, &#39;Hmox1&#39;, &#39;Bnip3&#39;, &#39;Nos2&#39;, &#39;Mmp2&#39;, &#39;Sod3&#39;, &#39;Cited2&#39;, &#39;Ldha&#39;), peric=c(&quot;ABCC9&quot;,&quot;PDGFRB&quot;,&quot;RGS5&quot;) ) myeloids_markers_list2 = list(pDC = c(&quot;CLEC4C&quot;,&quot;IRF7&quot;,&quot;TCF4&quot;,&quot;GZMB&quot;), cDC1 = c(&quot;XCR1&quot;,&quot;CLNK&quot;,&quot;CLEC9A&quot;), cDC2 = c(&quot;FCER1A&quot;,&quot;HLA-DPB1&quot;,&quot;HLA-DQB1&quot;,&quot;CD1E&quot;,&quot;CD1C&quot;,&quot;CLEC10A&quot;,&quot;HLA-DQA2&quot;), DC3 = c(&quot;CCL19&quot;,&quot;LAMP3&quot;,&quot;IDO1&quot;,&quot;IDO2&quot;,&quot;LAD1&quot;,&quot;FSCN1&quot;,&quot;CCR7&quot;,&quot;LY75&quot;,&quot;CCL22&quot;,&quot;CD40&quot;,&quot;BIRC3&quot;,&quot;NFKB2&quot;), Macrophages = c(&quot;APOC1&quot;,&quot;HLA-DRB5&quot;,&quot;C1QA&quot;,&quot;C1QB&quot;), RTMs = c(&quot;THBS1&quot;),#Resident tissue macrophages Lam = c(&quot;APOE&quot;),#Lipid associated macrophages Monocytes = c(&quot;LYZ&quot;,&quot;HLA-DRB1&quot;,&quot;TIMP1&quot;,&quot;S100A11&quot;,&quot;CXCL8&quot;,&quot;IL1B&quot;,&quot;PTGS2&quot;,&quot;S100A9&quot;,&quot;S100A8&quot;,&quot;MMP19&quot;), Mono_C = c(&#39;CD14&#39;),#Mono_CD14 Mono_F = c(&#39;FCGR3A&#39;),#Mono_FCGR3A Mast = c(&#39;TPSAB1&#39; , &#39;TPSB2&#39;)) Tcells_markers = c(&#39;PTPRC&#39;, &#39;CD3D&#39;, &#39;CD3E&#39;, &#39;CD4&#39;,&#39;CD8A&#39;, &#39;CCR7&#39;, &#39;SELL&#39; , &#39;TCF7&#39;,&#39;CXCR6&#39; , &#39;ITGA1&#39;, &#39;FOXP3&#39;, &#39;IL2RA&#39;, &#39;CTLA4&#39;,&#39;GZMB&#39;, &#39;GZMK&#39;,&#39;CCL5&#39;, &#39;IFNG&#39;, &#39;CCL4&#39;, &#39;CCL3&#39; , &#39;PRF1&#39; , &#39;NKG7&#39;) # CD4T CD4_markers_list =list( Tc=c(&quot;CD3D&quot;,&quot;CD3E&quot;), CD4=c(&quot;CD4&quot; ), Treg=c(&quot;TNFRSF4&quot;,&quot;BATF&quot;,&quot;TNFRSF18&quot;,&quot;FOXP3&quot;,&quot;IL2RA&quot;,&quot;IKZF2&quot;), naive=c(&quot;CCR7&quot;,&quot;SELL&quot;,&quot;CD5&quot;), Tfh=c(&quot;CXCR5&quot;,&quot;BCL6&quot;,&quot;ICA1&quot;,&quot;TOX&quot;,&quot;TOX2&quot;,&quot;IL6ST&quot;),#滤泡辅助性T细胞 ILC=c(&quot;TNFRSF25&quot;,&quot;KRT81&quot;,&quot;LST1&quot;,&quot;AREG&quot;,&quot;LTB&quot;,&quot;CD69&quot;) ) # CD8T CD8_markers_list1 =list( CD8=c(&quot;CD8A&quot;,&quot;CD8B&quot;), TN_TCM=c(&quot;CCR7&quot;,&quot;SELL&quot;,&quot;TCF7&quot;,&quot;LEF1&quot;), TEM=c(&quot;GZMK&quot; ), TEFF=c(&quot;TBX21&quot;,&quot;FCGR3A&quot;,&quot;FGFBP2&quot;), TRM=c(&quot;XCL1&quot;,&quot;XCL2&quot;,&quot;ITGAE&quot;,&quot;CD69&quot;), IEL_T = c(&quot;TMIGD2&quot;), yT1c=c(&quot;GNLY&quot;,&quot;PTGDS&quot;,&quot;GZMB&quot;,&quot;TRDC&quot;), yT2c=c(&quot;TMN1&quot;,&quot;HMGB2&quot;,&quot;TYMS&quot;), MAIT_T = c(&quot;SLC4A10&quot;) ) CD8_markers_list2 =list( CD8T=c(&quot;CD8A&quot;,&quot;CD8B&quot;), MAIT=c(&quot;ZBTB16&quot;,&quot;NCR3&quot;,&quot;RORA&quot;), ExhaustedCD8T=c(&quot;LAG3&quot;,&quot;TIGIT&quot;,&quot;PDCD1&quot;,&quot;HAVCR2&quot;,&quot;CTLA4&quot;), EffMemoryCD8=c(&quot;EOMES&quot;,&quot;ITM2C&quot;), Resting_NK=c(&quot;XCL1&quot;,&quot;XCL2&quot;,&quot;KLRC1&quot;), Cytotoxic_NK=c(&quot;CX3CR1&quot;,&quot;FGFBP2&quot;,&quot;FCGR3A&quot;,&quot;KLRD1&quot;), Pre_exhausted=c(&quot;IFNG&quot;,&quot;PRF1&quot;,&quot;GNLY&quot;,&quot;GZMA&quot;,&quot;NKG7&quot;,&quot;GZMK&quot;) ) cd4_and_cd8T_markers_list =list( naive=c(&quot;CCR7&quot;,&quot;SELL&quot;,&quot;TCF7&quot;,&quot;IL7R&quot;,&quot;CD27&quot;,&quot;CD28&quot;,&quot;LEF1&quot;,&quot;S1PR1&quot;), CD8Trm=c(&quot;XCL1&quot;,&quot;XCL2&quot;,&quot;MYADM&quot;), NKTc=c(&quot;GNLY&quot;,&quot;GZMA&quot;), Tfh=c(&quot;CXCR5&quot;,&quot;BCL6&quot;,&quot;ICA1&quot;,&quot;TOX&quot;,&quot;TOX2&quot;,&quot;IL6ST&quot;), th17=c(&quot;IL17A&quot;,&quot;KLRB1&quot;,&quot;CCL20&quot;,&quot;ANKRD28&quot;,&quot;IL23R&quot;,&quot;RORC&quot;,&quot;FURIN&quot;,&quot;CCR6&quot;,&quot;CAPG&quot;,&quot;IL22&quot;), CD8Tem=c(&quot;CXCR4&quot;,&quot;GZMH&quot;,&quot;CD44&quot;,&quot;GZMK&quot;), Treg=c(&quot;FOXP3&quot;,&quot;IL2RA&quot;,&quot;TNFRSF18&quot;,&quot;IKZF2&quot;), naive=c(&quot;CCR7&quot;,&quot;SELL&quot;,&quot;TCF7&quot;,&quot;IL7R&quot;,&quot;CD27&quot;,&quot;CD28&quot;), CD8Trm=c(&quot;XCL1&quot;,&quot;XCL2&quot;,&quot;MYADM&quot;), MAIT=c(&quot;KLRB1&quot;,&quot;ZBTB16&quot;,&quot;NCR3&quot;,&quot;RORA&quot;), yT1c=c(&quot;GNLY&quot;,&quot;PTGDS&quot;,&quot;GZMB&quot;,&quot;TRDC&quot;), yT2c=c(&quot;TMN1&quot;,&quot;HMGB2&quot;,&quot;TYMS&quot;), yt=c(&quot;TRGV9&quot;,&quot;TRDV2&quot;) ) # CD20 (MS4A1)表达于除plasma B 之外的所有B，很关键的区分naive 和plasma的marker # SDC1 = CD138 plasma B （接受抗原，可表达抗体） Bcels_markers_list = list( All = c(&#39;MS4A1&#39;,&#39;SDC1&#39;,&#39;CD27&#39;,&#39;CD38&#39;,&#39;CD19&#39;, &#39;CD79A&#39;), GC_B = c(&#39;IL4R&#39;,&#39;TCL1A&#39;,&#39;LRMP&#39;,&#39;SUGCT&#39;), IGA_plasm_B= c ( &#39;IGHA1&#39;), IGG_plasm_B= c ( &#39;IGHG1&#39;) ) Hepatic_stellate_markers_list =list( qHSC=c(&quot;Lrat&quot;,&quot;Ecm1&quot;,&quot;Angptl6&quot;,&quot;Vipr1&quot; ), S1=c(&quot;Ccl2&quot; ,&quot;Cxcl10&quot; ,&quot;Cxcl1&quot; ,&quot;Ccl7&quot; ), S2=c(&quot;Acta2&quot; ,&quot;Tpm1&quot; ,&quot;Vim&quot; ,&quot;Tagln&quot;,&quot;Tnc&quot;,&quot;Tpm2&quot;), S3=c(&quot;Col1a1&quot;,&quot;Col1a2&quot;,&quot;Col3a1&quot; ,&quot;Lox&quot;,&quot;Lum&quot; ) ) # arteries (HEY1, IGFBP3), capillaries (CD36, CA4), veins (ACKR1) and # lymphatic ECs (LECs; CCL21, PROX1). stromal_markers = c(&#39;TEK&#39;,&quot;PTPRC&quot;,&quot;EPCAM&quot;,&quot;PDPN&quot;, &quot;PECAM1&quot;,&#39;PDGFRB&#39;,&quot;PLVAP&quot;,&#39;PROX1&#39;,&#39;ACKR1&#39;,&#39;CA4&#39;,&#39;HEY1&#39;, &#39;CSPG4&#39;,&#39;GJB2&#39;, &#39;RGS5&#39;,&#39;ITGA7&#39;, &#39;ACTA2&#39;,&#39;RBP1&#39;,&#39;CD36&#39;, &#39;ADGRE5&#39;,&#39;COL11A1&#39;,&#39;FGF7&#39;, &#39;MME&#39;) last_markers = c(&#39;PTPRC&#39;, &#39;CD3D&#39;, &#39;CD3E&#39;, &#39;CD4&#39;,&#39;CD8A&#39;, &#39;CD19&#39;, &#39;CD79A&#39;, &#39;MS4A1&#39; , &#39;IGHG1&#39;, &#39;MZB1&#39;, &#39;SDC1&#39;, &#39;CD68&#39;, &#39;CD163&#39;, &#39;CD14&#39;, &#39;TPSAB1&#39; , &#39;TPSB2&#39;, # mast cells, &#39;RCVRN&#39;,&#39;FPR1&#39; , &#39;ITGAM&#39; , &#39;C1QA&#39;, &#39;C1QB&#39;, # mac &#39;S100A9&#39;, &#39;S100A8&#39;, &#39;MMP19&#39;,# monocyte &#39;FCGR3A&#39;, &#39;LAMP3&#39;, &#39;IDO1&#39;,&#39;IDO2&#39;,## DC3 &#39;CD1E&#39;,&#39;CD1C&#39;, # DC2 &#39;KLRB1&#39;,&#39;NCR1&#39;, # NK &#39;FGF7&#39;,&#39;MME&#39;, &#39;ACTA2&#39;, ## human fibo &#39;GJB2&#39;, &#39;RGS5&#39;, &#39;DCN&#39;, &#39;LUM&#39;, &#39;GSN&#39; , ## mouse PDAC fibo &#39;MKI67&#39; , &#39;TOP2A&#39;, &#39;PECAM1&#39;, &#39;VWF&#39;, ## endo &quot;PLVAP&quot;,&#39;PROX1&#39;,&#39;ACKR1&#39;,&#39;CA4&#39;,&#39;HEY1&#39;, &#39;EPCAM&#39; , &#39;KRT19&#39;,&#39;KRT7&#39;, # epi &#39;FYXD2&#39;, &#39;TM4SF4&#39;, &#39;ANXA4&#39;,# cholangiocytes &#39;APOC3&#39;, &#39;FABP1&#39;, &#39;APOA1&#39;, # hepatocytes &#39;Serpina1c&#39;, &#39;PROM1&#39;, &#39;ALDH1A1&#39; ) markers = c(&#39;gastric_cancer_markers&#39;,&#39;lung_epi_markers&#39;, &#39;Tcells_markers&#39;, &#39;stromal_markers&#39;, &#39;last_markers&#39; ) markers_list &lt;- c( &#39;GSE150580_breast_cancer_markers_list&#39; , &#39;SCP1661_meyloids_markers_list&#39; , &#39;myeloids_markers_list1&#39; , &#39;myeloids_markers_list2&#39; , &#39;CD4_markers_list&#39; , &#39;CD8_markers_list1&#39; , &#39;CD8_markers_list2&#39; , &#39;cd4_and_cd8T_markers_list&#39; , &#39;Bcels_markers_list&#39; , &#39;Hepatic_stellate_markers_list&#39; ) 设置物种 sp=&#39;human&#39; # human/mouse if(sp == &#39;human&#39;) { # 创建一个列表来存储所有的DotPlot图 plot_list1 &lt;- lapply(markers, function(x) { genes_to_check &lt;- str_to_upper(get(x)) plot1 &lt;- DotPlot(sce.all, features = genes_to_check) + coord_flip() + theme(axis.text.x = element_text(angle = 45, hjust = 1)) # 如果需要保存图形，可以取消注释以下行 # h = length(genes_to_check) / 6 + 4 # ggsave(paste(&#39;check_for_&#39;, x, &#39;.pdf&#39;), height = h) return(plot1) # 返回图形对象 }) plot_list2 &lt;- lapply(markers_list, function(x) { genes_to_check &lt;- lapply(get(x), str_to_upper) dup &lt;- names(table(unlist(genes_to_check)))[table(unlist(genes_to_check)) &gt; 1] genes_to_check &lt;- lapply(genes_to_check, function(x) x[!x %in% dup]) plot2 &lt;- DotPlot(sce.all, features = genes_to_check) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) # 如果需要保存图形，可以取消注释以下行 # w = length(unique(unlist(genes_to_check))) / 5 + 7 # ggsave(paste(&#39;check_for_&#39;, x, &#39;.pdf&#39;), width = w) return(plot2) # 返回图形对象 }) last_markers_to_check &lt;&lt;- str_to_upper(last_markers) # 打印所有的图形 plot_grid(plotlist = c(plot_list1, plot_list2), ncol = 3) } else if(sp == &#39;mouse&#39;) { # 创建一个列表来存储所有的DotPlot图 plot_list1 &lt;- lapply(markers, function(x) { genes_to_check &lt;- str_to_title(get(x)) plot1 &lt;- DotPlot(sce.all, features = genes_to_check) + coord_flip() + theme(axis.text.x = element_text(angle = 45, hjust = 1)) # 如果需要保存图形，可以取消注释以下行 # h = length(genes_to_check) / 6 + 4 # ggsave(paste(&#39;check_for_&#39;, x, &#39;.pdf&#39;), height = h) return(plot1) # 返回图形对象 }) plot_list2 &lt;- lapply(markers_list, function(x) { genes_to_check &lt;- lapply(get(x), str_to_title) dup &lt;- names(table(unlist(genes_to_check)))[table(unlist(genes_to_check)) &gt; 1] genes_to_check &lt;- lapply(genes_to_check, function(x) x[!x %in% dup]) plot2 &lt;- DotPlot(sce.all, features = genes_to_check) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) # 如果需要保存图形，可以取消注释以下行 # w = length(unique(unlist(genes_to_check))) / 5 + 6 # ggsave(paste(&#39;check_for_&#39;, x, &#39;.pdf&#39;), width = w) return(plot2) # 返回图形对象 }) last_markers_to_check &lt;&lt;- str_to_title(last_markers) # 打印所有的图形 plot_grid(plotlist = c(plot_list1, plot_list2), ncol = 3) } else { print(&#39;we only accept human or mouse&#39;) } DotPlot(sce.all , features = last_markers_to_check ) + coord_flip() + theme(axis.text.x=element_text(angle=45,hjust = 1))| DimPlot(sce.all, reduction = &quot;umap&quot;,raster = F, label = T,repel = T) 亚群命名 我们找到合适的 marker 基因后就可以进一步去可视化（我的理解是拿这些图在文章中展示）， 判断单细胞亚群的生物学名字。这里我们直接使用已经定义好的名字。 # 这里只是为了展示代码，就拿0.1分辨率的结果来展示 colnames(sce.all@meta.data) ## [1] &quot;orig.ident&quot; &quot;nCount_RNA&quot; &quot;nFeature_RNA&quot; &quot;group&quot; ## [5] &quot;percent_mito&quot; &quot;percent_ribo&quot; &quot;percent_hb&quot; &quot;RNA_snn_res.0.01&quot; ## [9] &quot;seurat_clusters&quot; &quot;RNA_snn_res.0.05&quot; &quot;RNA_snn_res.0.1&quot; &quot;RNA_snn_res.0.2&quot; ## [13] &quot;RNA_snn_res.0.3&quot; &quot;RNA_snn_res.0.5&quot; &quot;RNA_snn_res.0.8&quot; &quot;RNA_snn_res.1&quot; DimPlot(sce.all, group.by = &quot;RNA_snn_res.0.1&quot;) astrocytes = c(&quot;AQP4&quot;, &quot;ADGRV1&quot;, &quot;GPC5&quot;, &quot;RYR3&quot;) endothelial = c(&quot;CLDN5&quot;, &quot;ABCB1&quot;, &quot;EBF1&quot;) excitatory = c(&quot;CAMK2A&quot;, &quot;CBLN2&quot;, &quot;LDB2&quot;) inhibitory = c(&quot;GAD1&quot;, &quot;LHFPL3&quot;, &quot;PCDH15&quot;) microglia = c(&quot;C3&quot;, &quot;LRMDA&quot;, &quot;DOCK8&quot;) oligodendrocytes = c(&quot;MBP&quot;, &quot;PLP1&quot;, &quot;ST18&quot;) OPC=&#39;Tnr,Igsf21,Neu4,Gpr17&#39; Ependymal=&#39;Cfap126,Fam183b,Tmem212,pifo,Tekt1,Dnah12&#39; pericyte=c( &#39;DCN&#39;, &#39;LUM&#39;, &#39;GSN&#39; ,&#39;FGF7&#39;,&#39;MME&#39;, &#39;ACTA2&#39;,&#39;RGS5&#39;) Neurons= c(&quot;RBFOX1&quot;, &quot;RBFOX3&quot;, &quot;SYT1&quot;) gene_list = list( Astro = astrocytes, Endo = endothelial, Excit = excitatory, Inhib = inhibitory, Mic = microglia, Oligo = oligodendrocytes, OPC= str_to_upper(trimws(strsplit(OPC,&#39;,&#39;)[[1]])), Ependymal= str_to_upper(trimws(strsplit(Ependymal,&#39;,&#39;)[[1]])) , peri = pericyte , Neur = Neurons ) gene_list = lapply(gene_list, function(x){ unique(c(str_to_title(x), str_to_upper(x))) }) gene_list ## $Astro ## [1] &quot;Aqp4&quot; &quot;Adgrv1&quot; &quot;Gpc5&quot; &quot;Ryr3&quot; &quot;AQP4&quot; &quot;ADGRV1&quot; &quot;GPC5&quot; &quot;RYR3&quot; ## ## $Endo ## [1] &quot;Cldn5&quot; &quot;Abcb1&quot; &quot;Ebf1&quot; &quot;CLDN5&quot; &quot;ABCB1&quot; &quot;EBF1&quot; ## ## $Excit ## [1] &quot;Camk2a&quot; &quot;Cbln2&quot; &quot;Ldb2&quot; &quot;CAMK2A&quot; &quot;CBLN2&quot; &quot;LDB2&quot; ## ## $Inhib ## [1] &quot;Gad1&quot; &quot;Lhfpl3&quot; &quot;Pcdh15&quot; &quot;GAD1&quot; &quot;LHFPL3&quot; &quot;PCDH15&quot; ## ## $Mic ## [1] &quot;C3&quot; &quot;Lrmda&quot; &quot;Dock8&quot; &quot;LRMDA&quot; &quot;DOCK8&quot; ## ## $Oligo ## [1] &quot;Mbp&quot; &quot;Plp1&quot; &quot;St18&quot; &quot;MBP&quot; &quot;PLP1&quot; &quot;ST18&quot; ## ## $OPC ## [1] &quot;Tnr&quot; &quot;Igsf21&quot; &quot;Neu4&quot; &quot;Gpr17&quot; &quot;TNR&quot; &quot;IGSF21&quot; &quot;NEU4&quot; &quot;GPR17&quot; ## ## $Ependymal ## [1] &quot;Cfap126&quot; &quot;Fam183b&quot; &quot;Tmem212&quot; &quot;Pifo&quot; &quot;Tekt1&quot; &quot;Dnah12&quot; &quot;CFAP126&quot; ## [8] &quot;FAM183B&quot; &quot;TMEM212&quot; &quot;PIFO&quot; &quot;TEKT1&quot; &quot;DNAH12&quot; ## ## $peri ## [1] &quot;Dcn&quot; &quot;Lum&quot; &quot;Gsn&quot; &quot;Fgf7&quot; &quot;Mme&quot; &quot;Acta2&quot; &quot;Rgs5&quot; &quot;DCN&quot; &quot;LUM&quot; ## [10] &quot;GSN&quot; &quot;FGF7&quot; &quot;MME&quot; &quot;ACTA2&quot; &quot;RGS5&quot; ## ## $Neur ## [1] &quot;Rbfox1&quot; &quot;Rbfox3&quot; &quot;Syt1&quot; &quot;RBFOX1&quot; &quot;RBFOX3&quot; &quot;SYT1&quot; p1=DotPlot(sce.all, assay = &quot;RNA&quot;, features = gene_list, group.by = &#39;RNA_snn_res.0.1&#39;) + theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0.5));p1 根据最终的可视化图，我们就可以手动的给亚群命名了。 sce.all ## An object of class Seurat ## 28985 features across 20269 samples within 1 assay ## Active assay: RNA (28985 features, 2000 variable features) ## 3 layers present: counts, data, scale.data ## 3 dimensional reductions calculated: pca, harmony, umap dim(sce.all) ## [1] 28985 20269 sel.clust = &quot;RNA_snn_res.0.1&quot; sce.all &lt;- SetIdent(sce.all, value = sel.clust) res_len &lt;- table(sce.all@active.ident) %&gt;% length();res_len ## [1] 11 celltype=data.frame(ClusterID=(0:(res_len-1)), celltype= (0:(res_len-1))) # 自定义细胞亚群 celltype[celltype$ClusterID %in% c(2),2]=&#39;astrocytes&#39; celltype[celltype$ClusterID %in% c(4),2]=&#39;endothelial&#39; celltype[celltype$ClusterID %in% c(3),2]=&#39;microglia&#39; celltype[celltype$ClusterID %in% c(0),2]=&#39;oligodendrocytes&#39; celltype[celltype$ClusterID %in% c( 7 ),2]=&#39;OPC&#39; celltype[celltype$ClusterID %in% c( 1,5,6,8,10 ),2]=&#39;Neurons&#39; celltype[celltype$ClusterID %in% c( 9 ),2]=&#39;Ependymal&#39; head(celltype) ## ClusterID celltype ## 1 0 oligodendrocytes ## 2 1 Neurons ## 3 2 astrocytes ## 4 3 microglia ## 5 4 endothelial ## 6 5 Neurons table(celltype$celltype) ## ## astrocytes endothelial Ependymal microglia ## 1 1 1 1 ## Neurons oligodendrocytes OPC ## 5 1 1 sce.all@meta.data$celltype = &quot;NA&quot; for(i in 1:nrow(celltype)){ sce.all@meta.data[which(sce.all@meta.data[[sel.clust]] == celltype$ClusterID[i]),&#39;celltype&#39;] &lt;- celltype$celltype[i]} Idents(sce.all)=sce.all$celltype table(sce.all@active.ident) ## ## oligodendrocytes Neurons astrocytes OPC ## 6832 6971 3145 735 ## microglia endothelial Ependymal ## 1295 1154 137 最后我们就可以可视化我们的命名效果了。 DimPlot(sce.all, reduction = &quot;umap&quot;,raster = F, label = T,repel = T) + theme_dr(xlength = 0.22, ylength = 0.22, arrow = grid::arrow(length = unit(0.15, &quot;inches&quot;), type = &quot;closed&quot;))+ theme(panel.grid = element_blank()) 保存Seurat对象以便后续分析 saveRDS(sce.all, file = &quot;./sce.all_final.rds&quot;) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
